------------
| INFOS.TXT |
-------------

Post call du 24/01 : 
- Malo revoit le raycasting sur branche malo
- branche main reste intacte
- Branche bastien : 
	- maximap bugs : pos in double not int + player in walls
	- display manager to get rid of
	- minimap : ray vision
	- redraw : a sortie de maximap et d'outro -> launch raycast + minimap
	- key inputs : key_prewss + key_release -> enable multikey (rotate + walk)
	- normer les dernieres modifs genre store ppos, raycast ? 
	- a la limite finir le crouching
	- segfault raycast
	- textures to be choosen raycast

------
KEYS :
------
	- there is a array of bool for all moves cmds (wasd-c-left-right)
	- all key commands are recorder via mlx_hook(key_press)
	- if its a move command : it just turn the bool to according key to true
	- if its not a move cmd, it calls key_input that apply theright cmds (maximap, pause auit etc)
	- release keys are handled via mlx_hook(key_release) : if its a move cmd, it
	turns the bool to false from info->keys[]. 
	- all moves functions are handled with loop_manager : it check info->keys[]
	for any key that is on true, if so it calls according mvoe functions
--> this offers : 
		- can move forward and sideward or rotate at same time (not exactly but
		feels so in the game). Avancer en diagonale est donc possible
		- when severals keys are pressed abd only one is released : others still pressed
		cam still activate according function 
		- for non nmovement commands, if multiple are pressed and one is released,
		nothing happens 
--> problems : it goes very fast. Seeting a counter is not sexy, I ll just manage via
		velocity which seems to be very effective



-------------
Config file :
-------------
- "*.cub" --> is ".cub" accepted or not ?
* meaning in bash is any character or none
however ".blabla" is not a file with extension blabla, but an hidden file
When I create a file name ".cub" and then try "rm *.cub" --> no such file
But if I create a file "cub" and then try "rm *cub" -> it deletes the right file
it works with any command. bash and zsh.
From this tests I conclude that ".cub" is not acceptable.
- Space in the texture path
such as map\ .cub or "map .cub" is ok in bash. 
I dont handle theses.
- Quotes in the texture path --> '"config.cub"' should be accepted as config.cub
and not "config.cub". I accept one peer of quote (double or simple).
- Spaces in rgb --> "F  200    ,  23,255   " might be acceptable, but not for
texture_path because its a single peace of info
- Spaces that be part the texture path : i dont handle bc of ft_split(' ').

-----
MAP :
-----
	- I decided to :
		- make all lines the same lenght (the longest)
		- turn extra char of enlarged lines to spaces
		- transform spaces into char '2'
	--> All maps are rectangle and no problem of wall for shorter line
	- Exactly one player pos (one of : N,S,E,W)
	- No empty lines are accepted within the map (or after)
-------> Eric's idea : resize la map at longest line with spaces. Do not replace
space by 1, just check that space are surrounded (from all sides) by space or 
wall, never 0 or player pos
and finally check that the ractangle map is surrounded by walls


------------
MLX BASICS : 
------------
	- input convention : /usr/include/X11/keysymdef.h
	- events : /usr/include/X11/X.h
	- Endian : for portability will be checking it with : 
			int n=1; *(char *)&n = 1 ? little (most sign left) : big (most sign right) 

-------
BONUS :
-------
		- minimap
		- [c] for crouching (s'accroupir) + flying and laying ? 
		- zoom in/out

---------
MAXIMAP :
---------
		- sizing : 
			- 1920 = 29 * 64 + 64
			- 1056 = 15 * 64 + 64
			-> de base en 64 on peut afficher du 29 par 15 avec une bordure
			- on pourrait travailler en 2^ : 64 - 32 - 16 - 8 - 4
			mais on aurait des gros delta pour pas grand chose genre un 30 * 15 serait
			en 32 avec du coup une enorme bordure. on va plutot faire un calcul precis 
			- on garde une taille en CARRE pour eviter d'avoir des formes chelou sur les maps
			genre line shape : on aura donc possiblement une grosse bordure en x ou en y 
			- il faudra calculer une taille de bordure en x et une autre en y
	- soit y le nb de ligne
	- soit x la largeur de ligne
	- soit WIN_H la hauteur max : 1056
	- soit WIN_W la largeur max : 1920
	- soit TILE la taille d'un rect avec TILE = x_rect = y_rect
	- on cherche TILE connaissant W et H x et y
	- en laissant au moins un TILE en x et un en y pour la bordure (un demi tile de chaque cote)
	- TILE sera la plus petit trouve entre x et y 
- en x : TILEx = WIN_W / (x+1)
- en y : TILEy = WIN_H / (y+1)
- res = min(TILEx, TILEy)
	- on cherche ensuite la taille de la bordure en x et en y
- bordurex = WIN_W - (TILEx * x)
- bordurey = WIN_H - (TILEy * y)
	- en decoule pos de depart pour mlx put image to win
- xpos = bordurex / 2
- ypos = bordurey / 2
				- il faudrqait sensuite adapter la taille de joueur sur la mmap :
				pour l'instant c un carre de 8 pixel
PLUS OPTI : 
	- deux fonctions : 
		-> maximap_first_draw : draw toute la map tel quel
		-> maximap_redraw : juste remettre le bon rect at oldx, oldy et 
		draw_player_icon at nwx, newy

---------------
GAME COMMANDS : 
---------------
[WASD]			:	move around in game
[Left/Right]	:	turn in game
[Q]				:	directly quit game with no msg (==red cross left click)
[M]				:	on/off full map view where you can leftclick to teleport
[ESC]			:	on/off pause menu. leftclik ; or press enter to leave, esc
					to resume game

---------
MINIMAP :
---------
(dessiner player sur minimap direct pour ne jamais avoir a redraw fminimap ????)
			- fminimap : an image that represent the whole map (big size)
			- minimap : an image of 200x200 cropped from fminimap with player centered
			- actualization must be managed not to redraw to much 
Centering minimap (segflt pb if pos is top left ; idem pour x et y) : 
	- minimap background in black (draw_rect 200x200)
	- two pos are needed for img_to_img : fminimap anchor relative to player pos,
		and minimap anchor according to fminimap anchor
	-> fminimap anchor = pposx * tile_size - tile_size / 2 (- icon size / 2)
		pos du player * le pas - une moitie de pas pour bien centrer (et prendre
		en compte la taille de player icon?)
	-> minimap anchor = 100 - fminimap anchor. if < 0: 0.
		si le player est top left : le centrer sur minimap demande a coller
		du negatif de fminimap, du coup on check ca : si c le cas on decale
		l'anchor de minimap vers la droite (on a deja un blackbg), sinon on peut
		centrer normal en collant l'anchor de fminimap en 0 de minimap.
PLUS OPTI :
	- on cree une image de 192x192 (12 tile de 16 px)
	- draw un blak bg sur cette img
	- draw rect border in blue at 20,20 of 191x191 + 190x190 (doubled)
	- juste faire du draw rect a partir de player pos, comme sur maximap
	-> checker si dans la map
		-> mettre un rect en bonne pos 
		-> neg x y from player pos wont be drawn 
		-> pos x y from player but outside la map wont be drawn neither
	-> les potentielles vides de la minimap seront sur le blackbg 
	-> on dessine un rect player toujours au centre
	-> on mlx_pixel_put l'img a chaque redraw (necessaire anyway)

---------
RAYCAST : 
---------
	Variables : 
		- pos x = player pos abscyce
		- pos y = player pos ordonnees
		--> vecteur pos. (=position du player sur la map)
		- dir x = direction en abscyce
		- dir y = direction en ordonnees
		--> vecteur dir (=direction du player && direction vers laquelle dessiner le camera plane)
		- plane x = camera plane abscyce
		- plane y = camera plane ordonee 
		-> vecteur plane : 
			- camera plane du joueur 
			- toujours perpendiculaire au vecteur dir
			- le FOV est determine par le ratio dir / plane (cf. schema1_raycast)
			- plus le dir est grand et le plane petit, plus le FOV est ferme (on dezoom)
			- plus le dir est petit et le plane grand, plus le FOV est ovuert (zoom)
			- un ratio acceptable est de 66degress
			- plane represente la moitie droite du camera plane :
				-> pos + dir + plane : moitie droite
				-> pos + dir - plane : moitie gauche
